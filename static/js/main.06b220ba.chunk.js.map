{"version":3,"sources":["constants/Constants.ts","components/Header.tsx","helpers/helpers.ts","contexts/ParticipantContext.tsx","components/TableCell.tsx","components/ColumnTitle.tsx","hooks/useEditableParticipant.ts","hooks/useParticipants.ts","components/Buttons.tsx","components/InputFields.tsx","components/Forms.tsx","components/TableRow.tsx","components/ParticipantRow.tsx","components/ParticipantTable.tsx","components/Content.tsx","App.tsx","index.tsx"],"names":["PHONE","EMAIL","INITIAL_PARTICIPANT_NAMES","EMPTY_PARTICIPANT","id","name","phone","email","Header","className","handleValidation","event","participant","preventDefault","errors","test","validate","Object","entries","length","alert","values","join","ParticipantContext","createContext","ParticipantProvider","children","useState","Array","from","index","min","max","Math","ceil","floor","random","toLowerCase","replace","participants","setParticipants","lastId","setLastId","Provider","value","addParticipant","newId","updateParticipant","updatedParticipant","updatedId","editedIndex","findIndex","participantsBefore","slice","participantsAfter","deleteParticipant","filter","sortParticipants","sortType","key","desc","sorted","sort","a","b","first","toString","second","TableCell","isHeader","rest","TableHeader","ColumnTitle","title","fieldName","setSortType","setDesc","onClick","newDir","icon","useEditableParticipant","editableParticipant","setEditableParticipant","handleParticipantFieldChange","target","initEditableParticipant","useParticipants","context","useContext","undefined","Error","IconButton","onClickFn","type","TextButton","buttonText","SubmitButton","props","InputField","placeholder","handleChange","onChange","e","InputFields","Constants","SubmitForm","onSubmitFn","onSubmit","AddParticipantForm","newParticipant","UpdateParticipantForm","setEditable","TableRow","ParticipantRow","editable","ParticipantTable","useEffect","map","Content","App","library","add","faTrash","faPen","faArrowUp","faArrowDown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b220ba.chunk.js","sourcesContent":["export const COMPANY_NAME = 'Word Software'\r\n\r\nexport const PARTICIPANT_LIST_HEADER = 'List of Participants'\r\n\r\nexport const BUTTON_TEXT_ADD_NEW = 'Add new'\r\n\r\nexport const BUTTON_TEXT_SAVE = 'Save'\r\n\r\nexport const BUTTON_TEXT_CANCEL = 'Cancel'\r\n\r\nexport const FULL_NAME = 'Full name'\r\n\r\nexport const NAME = 'Name'\r\n\r\nexport const PHONE = 'Phone number'\r\n\r\nexport const EMAIL = 'E-mail address'\r\n\r\nexport const INITIAL_PARTICIPANT_SIZE = 20\r\n\r\nexport const INITIAL_PARTICIPANT_NAMES = [\r\n  'Albie Alvey', 'Avalon Wyndham', 'Deloris Alvey', 'Elicia Meadows', \r\n  'Eliott Spalding', 'Fabian Morris', 'Fay Deering', 'Gayla Goodwin', \r\n  'Hazel Salvage', 'Jayden Stainthorpe', 'Kathie Upton', 'Kayley Wilkinson', \r\n  'Kerr Selby', 'Kizzy Arrington', 'Leah Belmont', 'Louisa Macey', \r\n  'Lucian Hill', 'Philippa Eldred', 'Rylee Fairbairn', 'Yolanda Hext', \r\n]\r\n\r\nexport const EMPTY_PARTICIPANT_ID = 0\r\n\r\nexport const EMPTY_PARTICIPANT = { id: EMPTY_PARTICIPANT_ID,  name: '', phone:'', email: '' }\r\n","import { COMPANY_NAME } from \"../constants/Constants\"\n\nconst Header = () => (\n  <div className=\"header\">\n    <span className=\"logo\"/>\n    {COMPANY_NAME}\n  </div>\n)\n\nexport default Header\n","import { FormEvent } from 'react'\r\nimport { INITIAL_PARTICIPANT_NAMES } from '../constants/Constants'\r\nimport { ParticipantType } from '../types/types'\r\n\r\nconst getRandomInt = (min : number, max: number) => {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\nexport const createInitialParticipants = () => Array.from(\r\n  INITIAL_PARTICIPANT_NAMES, (name, index) => (\r\n    { id: index + 1,\r\n      name: name,\r\n      phone: '050' + getRandomInt(1000000, 9000000),\r\n      email: name.toLowerCase().replace(' ', '.') + '@gmail.com' }\r\n  ))\r\n\r\nexport const validate = (participant: ParticipantType) => {\r\n  const errors: Record<string, string> = {}\r\n  const {name, email, phone} = participant\r\n  if (!name) {\r\n    errors.name = 'Name is required'\r\n  }\r\n  if (!phone) {\r\n    errors.phone = 'Phone is required'\r\n  }\r\n  else if (!/^[0-9\\b]+$/.test(phone)) {\r\n    errors.phone = 'Phone is invalid'\r\n  }\r\n  if (!email) {\r\n    errors.email = 'Email address is required'\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n    errors.email = 'Email address is invalid'\r\n  }\r\n  return errors\r\n}\r\n\r\nexport const handleValidation = (event: FormEvent<HTMLFormElement>, participant: ParticipantType) => {\r\n  event.preventDefault()\r\n  const errors = validate(participant)\r\n  if (Object.entries(errors).length === 0) {\r\n    return true \r\n  }\r\n  alert(Object.values(errors).join('\\n'))\r\n  return false\r\n}","import { ReactNode, useState } from \"react\"\r\nimport { createContext } from \"react\"\r\nimport { INITIAL_PARTICIPANT_SIZE } from \"../constants/Constants\"\r\nimport { createInitialParticipants } from \"../helpers/helpers\"\r\nimport { ParticipantType, SortType } from \"../types/types\"\r\n\r\nexport interface ParticipantContextType\r\n{\r\n    participants: ParticipantType[];\r\n    addParticipant: (participant: ParticipantType) => void;\r\n    updateParticipant: (participant: ParticipantType) => void;\r\n    deleteParticipant: (id: number) => void\r\n    sortParticipants: (sortType: SortType) => void;\r\n}\r\n\r\nconst ParticipantContext = createContext<Partial<ParticipantContextType>>({})\r\n\r\nexport default ParticipantContext\r\n\r\ninterface ParticipantProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ParticipantProvider = ({children}: ParticipantProviderProps) => {\r\n    const [participants, setParticipants] = useState<ParticipantType[]>(createInitialParticipants())\r\n\r\n    const [lastId, setLastId] = useState(INITIAL_PARTICIPANT_SIZE)\r\n\r\n    const sortParticipants = (sortType: SortType) => {\r\n        const { key, desc } = sortType\r\n        const sorted = [...participants].sort((a, b) => {\r\n          const first = a[key].toString().toLowerCase()\r\n          const second = b[key].toString().toLowerCase()\r\n          if (desc)\r\n            return second > first ?  1 : -1\r\n          else\r\n            return second > first ?  -1 : 1\r\n        }\r\n        ) \r\n        setParticipants(sorted)\r\n      }\r\n\r\n    const addParticipant = (participant: ParticipantType) => { \r\n        const newId = lastId + 1     \r\n        setParticipants([...participants, {...participant, id: newId}])\r\n        setLastId(newId)\r\n      }\r\n\r\n    const updateParticipant = (updatedParticipant: ParticipantType)=>{\r\n        const updatedId = updatedParticipant.id\r\n        const editedIndex = participants.findIndex((participant) => participant.id === updatedId)\r\n        const participantsBefore = participants.slice(0, editedIndex)\r\n        const participantsAfter = participants.slice(editedIndex + 1, participants.length)\r\n        setParticipants([...participantsBefore, {...updatedParticipant}, ...participantsAfter])\r\n      }\r\n\r\n    const deleteParticipant =  (id: number) => {\r\n        setParticipants(participants.filter(\r\n          (participant) => participant.id !== id)\r\n        )\r\n      }\r\n    \r\n    return (\r\n    <ParticipantContext.Provider value={\r\n      {participants, addParticipant, updateParticipant, deleteParticipant, sortParticipants}\r\n      }>\r\n        {children}\r\n    </ParticipantContext.Provider>)\r\n}\r\n","import { DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react'\r\n\r\nexport interface TableCellProps \r\nextends DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {\r\n  children?: ReactNode;\r\n  isHeader?: boolean;\r\n}\r\n\r\nconst TableCell = ({children = null, isHeader = false, ...rest}: TableCellProps) => {\r\n  return (\r\n    <span className={isHeader ? \"table-header\": \"table-cell\"} {...rest}>\r\n        {children}\r\n     </span>\r\n  )\r\n}\r\n\r\nexport default TableCell\r\n\r\nexport const TableHeader = ({children = null, ...rest}: TableCellProps) => {\r\n    return (\r\n      <TableCell isHeader {...rest}>\r\n        {children}\r\n      </TableCell>\r\n    )\r\n}\r\n\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport  { useState } from 'react'\nimport { ParticipantTypeKey, SortType } from '../types/types'\nimport { TableHeader } from './TableCell'\n\ninterface ColumnTitleProps {\n  title: string;\n  fieldName: ParticipantTypeKey;\n  sortType: SortType;\n  setSortType: (sortType: SortType) => void;\n}\n\nconst ColumnTitle = ({ title, fieldName, sortType, setSortType }: ColumnTitleProps) => {\n\n  const [desc, setDesc] = useState(false)\n\n  const sort = () => {\n    const newDir = !desc\n    setSortType({ desc: newDir, key: fieldName })\n    setDesc(newDir)\n  }\n\n  return (\n    <TableHeader onClick={() => sort()}>\n      {title}\n      {sortType.key === fieldName && <FontAwesomeIcon icon={desc ? \"arrow-up\" : \"arrow-down\"} />}\n  </TableHeader>\n  )\n}\n\nexport default ColumnTitle\n","import { useState, ChangeEvent } from \"react\"\r\nimport { EMPTY_PARTICIPANT } from \"../constants/Constants\"\r\nimport { ParticipantType, ParticipantTypeKey } from \"../types/types\"\r\n\r\nconst useEditableParticipant = (participant?: ParticipantType) => {\r\n    const [editableParticipant, setEditableParticipant] = useState(participant || EMPTY_PARTICIPANT)\r\n\r\n    const handleParticipantFieldChange = (\r\n      event: ChangeEvent<HTMLInputElement>,\r\n      fieldName: ParticipantTypeKey\r\n      ) => {\r\n      setEditableParticipant({ ...editableParticipant, [fieldName]: event.target.value })\r\n    }\r\n\r\n    const initEditableParticipant = () =>\r\n    {\r\n      setEditableParticipant(EMPTY_PARTICIPANT)\r\n    }\r\n\r\n    return {editableParticipant, handleParticipantFieldChange, initEditableParticipant }\r\n}\r\n\r\nexport default useEditableParticipant\r\n","import { useContext } from \"react\"\r\nimport ParticipantContext from \"../contexts/ParticipantContext\"\r\n\r\nconst useParticipants = () => {\r\n    const context = useContext(ParticipantContext)\r\n    if (context === undefined) {\r\n      throw new Error('useParticipants must be used within a ParticipantProvider')\r\n    }\r\n    return context\r\n  }\r\n\r\nexport default useParticipants","import { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { ButtonHTMLAttributes, DetailedHTMLProps } from 'react'\n\nexport interface IconButtonProps {\n    onClickFn: () => void;\n    icon: IconProp;\n}\n\nexport const IconButton = ({ onClickFn, icon }: IconButtonProps) => (\n  <button type=\"button\" className=\"icon-button\" onClick={() => onClickFn()}>\n    <FontAwesomeIcon icon={icon} />\n  </button>\n)\n\ninterface TextButtonProps\nextends DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n  className: string;\n  buttonText: string;\n  type?: 'button' | 'submit';\n  onClick?: () => void;\n}\n\nexport const TextButton = ({\n  className, buttonText, type = 'button', onClick,\n}: TextButtonProps) => (\n  <button className={`text-button ${className}`} type={type || 'button'} {...{ onClick }}>\n    {buttonText}\n  </button>\n)\n\nexport const SubmitButton = ({ ...props }: TextButtonProps) => (\n  <TextButton {...props} type=\"submit\" />\n)\n","import { ChangeEvent } from 'react'\nimport * as Constants from '../constants/Constants'\nimport { ParticipantType, ParticipantTypeKey } from '../types/types'\nimport TableCell from './TableCell'\n\ninterface InputFieldsProps {\n  participant: ParticipantType;\n  handleChange: (event: ChangeEvent<HTMLInputElement>, fieldName: ParticipantTypeKey) => void;\n}\n\nconst InputFields = ({ participant, handleChange }: InputFieldsProps) => (\n  <>\n    <InputField name=\"name\" placeholder={Constants.FULL_NAME} {...{ participant, handleChange }} />\n    <InputField name=\"email\" placeholder={Constants.EMAIL} {...{ participant, handleChange }} />\n    <InputField name=\"phone\" placeholder={Constants.PHONE} {...{ participant, handleChange }} />\n  </>\n)\n\ninterface InputFieldProps extends InputFieldsProps {\n  name: ParticipantTypeKey;\n  placeholder: string;\n}\n\nconst InputField = ({\n  name, placeholder, participant, handleChange\n}: InputFieldProps) => (\n  <TableCell>\n    <input {...{ name, placeholder }} type=\"text\" value={participant[name]} onChange={(e) => handleChange(e, name)} />\n  </TableCell>\n)\n\nexport default InputFields\n","import { FormEvent, ReactNode } from 'react'\r\nimport { BUTTON_TEXT_ADD_NEW, BUTTON_TEXT_CANCEL, BUTTON_TEXT_SAVE } from '../constants/Constants'\r\nimport { ParticipantContextType } from '../contexts/ParticipantContext'\r\nimport { handleValidation } from '../helpers/helpers'\r\nimport useEditableParticipant from '../hooks/useEditableParticipant'\r\nimport useParticipants from '../hooks/useParticipants'\r\nimport { ParticipantType } from '../types/types'\r\nimport { TextButton, SubmitButton } from './Buttons'\r\nimport InputFields from './InputFields'\r\nimport TableCell from './TableCell'\r\n\r\ninterface SubmitFormProps {\r\n  onSubmitFn: (event: FormEvent<HTMLFormElement>) => void;\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst SubmitForm = ({ onSubmitFn, children, className }: SubmitFormProps) => (\r\n  <form onSubmit={onSubmitFn} className={\"table-row\" + (className ? (\" \" + className) : \"\")}>\r\n    {children}\r\n  </form>\r\n)\r\n\r\nexport default SubmitForm\r\n\r\nexport const AddParticipantForm = () => {\r\n  const { addParticipant } = useParticipants() as ParticipantContextType\r\n\r\n  const { editableParticipant: newParticipant, \r\n          initEditableParticipant,\r\n          handleParticipantFieldChange \r\n        } = useEditableParticipant()\r\n\r\n  const handleCreateParticipant = (event: FormEvent<HTMLFormElement>) => {\r\n    const validationPassed = handleValidation(event, { ...newParticipant })\r\n    if (validationPassed) {\r\n      addParticipant(newParticipant)\r\n      initEditableParticipant()\r\n    }\r\n  }\r\n\r\n  return (\r\n     <SubmitForm onSubmitFn={handleCreateParticipant} className=\"add-participant-form\">\r\n        <InputFields {...{ participant: newParticipant, handleChange: handleParticipantFieldChange }} />\r\n        <TableCell>\r\n          <SubmitButton className=\"text-button add-button\" buttonText={BUTTON_TEXT_ADD_NEW} />\r\n        </TableCell>\r\n      </SubmitForm>\r\n  )\r\n}\r\n\r\ninterface UpdateParticipantFormProps {\r\n  participant: ParticipantType;\r\n  setEditable: (editable: boolean) => void;\r\n}\r\n\r\nexport const UpdateParticipantForm = ({ participant, setEditable }: UpdateParticipantFormProps) => {\r\n  const { updateParticipant } = useParticipants() as ParticipantContextType\r\n\r\n  const { editableParticipant,\r\n          handleParticipantFieldChange \r\n        } = useEditableParticipant(participant)\r\n\r\n  const handleUpdateParticipant = (event: FormEvent<HTMLFormElement>) => {\r\n    const validationPassed = handleValidation(event, editableParticipant)\r\n    if (validationPassed) {\r\n      updateParticipant(editableParticipant)\r\n      setEditable(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SubmitForm onSubmitFn={handleUpdateParticipant}>\r\n        <InputFields\r\n          participant={editableParticipant}\r\n          handleChange={handleParticipantFieldChange}\r\n        />\r\n        <TableCell>\r\n          <TextButton className=\"cancel-button\" onClick={() => setEditable(false)} buttonText={BUTTON_TEXT_CANCEL} /> \r\n          <SubmitButton className=\"save-button\" buttonText={BUTTON_TEXT_SAVE} />\r\n        </TableCell>\r\n    </SubmitForm>\r\n  )\r\n}\r\n","import { ReactNode } from 'react'\r\n\r\nexport interface TableRowProps \r\nextends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst TableRow = ({children, ...rest}: TableRowProps) => {\r\n  return (\r\n    <div className=\"table-row\" {...rest}>\r\n        {children}\r\n     </div>\r\n  )\r\n}\r\n\r\nexport default TableRow\r\n","import { useState } from 'react'\nimport { ParticipantContextType } from '../contexts/ParticipantContext'\nimport { UpdateParticipantForm } from './Forms'\nimport { IconButton } from './Buttons'\nimport TableCell from './TableCell'\nimport { ParticipantType } from '../types/types'\nimport TableRow from './TableRow'\nimport useParticipants from '../hooks/useParticipants'\n\nexport interface ParticipantRowProps {\n  participant: ParticipantType;\n}\n\nconst ParticipantRow = ({ participant }: ParticipantRowProps) => {\n  const [editable, setEditable] = useState(false)\n\n  const { deleteParticipant } = useParticipants() as ParticipantContextType\n\n  return (\n    editable\n      ? ( <UpdateParticipantForm {...{ participant, setEditable }} />)\n      : (\n        <TableRow onClick={() => setEditable(true)}>\n          <TableCell>\n            {participant.name}\n          </TableCell> \n          <TableCell>\n            {participant.email}\n          </TableCell>\n          <TableCell>\n            {participant.phone}\n          </TableCell>  \n          <TableCell>\n            <IconButton onClickFn={() => setEditable(false)} icon=\"pen\" />\n            <IconButton onClickFn={() => deleteParticipant(participant.id)} icon=\"trash\" />\n          </TableCell> \n        </TableRow>\n      )\n  )\n}\n\nexport default ParticipantRow\n","import { ParticipantContextType } from '../contexts/ParticipantContext'\r\nimport { ParticipantType, SortType } from '../types/types'\r\nimport * as Constants from '../constants/Constants'\r\nimport ColumnTitle from './ColumnTitle'\r\nimport ParticipantRow from './ParticipantRow'\r\nimport { TableHeader } from './TableCell'\r\nimport TableRow from './TableRow'\r\nimport { AddParticipantForm } from './Forms'\r\nimport useParticipants from '../hooks/useParticipants'\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst ParticipantTable = () => {\r\n  const { participants, sortParticipants } = useParticipants() as ParticipantContextType\r\n\r\n  const [sortType, setSortType] = useState<SortType>({ key: 'name', desc: undefined})\r\n\r\n  useEffect(() => {\r\n    if (sortType.desc !== undefined) {\r\n      sortParticipants(sortType)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [sortType])  \r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <AddParticipantForm />\r\n      <TableRow>\r\n        <ColumnTitle title={Constants.NAME} fieldName=\"name\" {...{sortType, setSortType}} />\r\n        <ColumnTitle title={Constants.EMAIL} fieldName=\"email\" {...{sortType, setSortType}} />\r\n        <ColumnTitle title={Constants.PHONE} fieldName=\"phone\" {...{sortType, setSortType}} />\r\n        <TableHeader />\r\n      </TableRow>\r\n      {participants.map((participant: ParticipantType) => (\r\n        <ParticipantRow key={participant.id} {...{ participant }} />)\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ParticipantTable\r\n","import { PARTICIPANT_LIST_HEADER } from '../constants/Constants'\nimport { ParticipantProvider } from '../contexts/ParticipantContext'\nimport ParticipantTable from './ParticipantTable'\n\nconst Content = () => (\n  <div className=\"content\">\n    <h1>\n      {PARTICIPANT_LIST_HEADER}\n    </h1>\n    <ParticipantProvider>\n      <ParticipantTable />\n    </ParticipantProvider>\n  </div>\n)\n\nexport default Content\n","import './index.css'\r\nimport { faTrash, faPen, faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport Header from './components/Header'\r\nimport Content from './components/Content'\r\n\r\nconst App = () => {\r\n\r\n  library.add(faTrash, faPen, faArrowUp, faArrowDown)\r\n\r\n  return (\r\n    <>\r\n      <Header/>\r\n      <Content/>\r\n    </> \r\n  )\r\n} \r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}